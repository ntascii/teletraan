{% load utils %}
{% if asg.status == "DISABLED" %}
<div class="panel panel-danger">
{% else %}
<div class="panel panel-default">
{% endif %}
    <div class="panel-heading clearfix">
        <h4 class="panel-title pull-left pointer-cursor">
            <a data-toggle="collapse" data-target="#{{ panel_body_id }}">
                <span id="{{ panel_body_id }}Toggler"
                      class="glyphicon glyphicon-chevron-{{ direction }}">
                </span>
                {%  if asg.status == "UNKNOWN" %}
                  Auto Scaling Group (Not enabled)
                {% elif asg.status == "DISABLED" %}
                Auto Scaling Group (Disabled)
                {% else %}
                Auto Scaling Group
                {% endif %}
            </a>
        </h4>
    </div>
</div>
<div id="autoscalingConfigId" class="collapse in panel-body">
    <div class="container-fluid">
        <form id="autoscalingGroupConfigFormId" class="form-horizontal" role="form">
            <input type="hidden" name="asgStatus" value="{{ asg.status }}">
            <input type="hidden" name="groupName" value="{{ group_name }}">
            <fieldset id="envConfigFieldSetId">
                <asg-capacity-config v-bind:minsize="minsize" v-bind:maxsize="maxsize"
                    labelbootstrapclass="col-xs-2" inputbootstrapclass="col-xs-4"
                    labeltitle="Capacity (Current size is {{ group_size }})"
                    labeltext="Minimun and maximum number of hosts in one autoscaling group"
                    v-on:minchange="updateMin" v-on:maxchange="updateMax"></asg-capacity-config>
                <form-warning v-show="showSizeWarning" v-bind:warningtext="sizeWarning"></form-warning>
                <div class="form-group">
                    <label for="terminationPolicy" class="deployToolTip control-label col-xs-2"
                            data-toggle="tooltip" title="termination policy">
                        Termination Policy
                    </label>
                    <div class="col-xs-4">
                        <select class="form-control" name="terminationPolicy" required="true" id="terminationPolicyInput">
                        {% for policy in terminationPolicies %}
                            {% if policy == asg.terminationPolicy %}
                                <option value="{{policy}}" selected>{{policy}}</option>
                            {% else %}
                                <option value="{{policy}}">{{policy}}</option>
                            {% endif %}
                        {% endfor %}
                        </select>
                    </div>
                </div>
            </fieldset>
        {% csrf_token %}
        </form>
    </div>
</div>


<div class="panel-footer clearfix">
    <div class="pull-right">
        <button id="resetEnvConfigBtnId" class="btn btn-default" data-loading-text="Reloading...">
            <span class="glyphicon glyphicon-refresh"></span> Reload
        </button>
        <button id="saveEnvConfigBtnId" class="btn btn-primary" data-loading-text="Saving...">
            <span class="glyphicon glyphicon-floppy-save"></span> Save
        </button>
    </div>
</div>

<div id="scheduledActionsPid"></div>
<div id="scalingPolicyPid"></div>
<div id="alarmMetricPid"></div>

<script>
$(function() {
    $.get('/groups/{{ group_name }}/autoscaling/get_pas_config/', function (response) {
        $('#pasConfigPid').html(response);
    });
});

{% if placements %}
const placements = {{ placements | safe }};
{% else %}
const placements = null;
{% endif %}
const remainingCapacity = placements != null ?  placements.reduce((s, e) => s + e.capacity, 0) : Infinity;

var asgConfigVue = new Vue({
    el: '#autoscalingConfigId',
    data: {
        {% if asg %}
            minsize: {{ asg.minSize }},
            maxsize: {{ asg.maxSize }},
            originalMinSize: {{ asg.minSize }},
            originalMaxSize: {{ asg.maxSize }},
        {% else %}
            minsize: 0,
            maxsize: 0,
            originalMinSize: 0,
            originalMaxSize: 0,
        {% endif%}
        showSizeWarning: false,
        sizeWarning: '',
    },
    methods: {
        updateMin:function(value){
            this.minsize = Number(value)
            if (this.maxsize<this.minsize){
                this.maxsize = this.minsize
            }
            this.validateSize(this.originalMinSize, this.minsize)
        },
        updateMax: function(value){
            this.maxsize = Number(value)
            if (this.maxsize<this.minsize){
                this.minsize = this.maxsize
            }
            this.validateSize(this.originalMinSize, this.maxsize)
        },
        validateSize: function(fromSize, toSize) {
            if (toSize - fromSize >= remainingCapacity) {
                this.sizeWarning = `Insufficient combined remaining capacity in this cluster. ` +
                    `You can save this configuration but the cluster might run into capacity issues in the future. ` +
                    `You can attach additional placements to the cluter to increase total potential capacity at Cluter Configuration -> Advanced Settings.\n` +
                    `Combined remaining capacity: ${remainingCapacity}\n` +
                    `Requested size increase: ${toSize - fromSize}\n` +
                    `Current placement(s): ${JSON.stringify(placements, null, 2)}`
                this.showSizeWarning = true
            } else {
                this.showSizeWarning = false
            }
        },
    }
});

function loadAsgScheduledActions() {
    $("#scheduledActionsPid").addClass("panel panel-default");
    var asg_policy_url = "/groups/{{ group_name }}/autoscaling/get_scheduled_actions/";
    $.get(asg_policy_url, function(response) {
        $("#scheduledActionsPid").html(response);
    });
}

function loadAsgPolicy() {
    $("#scalingPolicyPid").addClass("panel panel-default");
    var asg_policy_url = "/groups/{{ group_name }}/autoscaling/get_asg_policy/";
    $.get(asg_policy_url, function(response) {
        $("#scalingPolicyPid").html(response);
    });
}

function loadAsgAlarms() {
    $("#alarmMetricPid").addClass("panel panel-default");
    var asg_policy_url = "/groups/{{ group_name }}/autoscaling/get_metrics/";
    $.get(asg_policy_url, function(response) {
        $("#alarmMetricPid").html(response);
    });
}

function getAdvancedSetting() {
    loadAsgPolicy();
    loadAsgScheduledActions();
    loadAsgAlarms();
}

$(document).ready(function() {
    getAdvancedSetting();
});

$(function () {
    $("#autoScalingType").change(function() {
        getAdvancedSetting();
    });

    $('#saveEnvConfigBtnId').attr('disabled','disabled');
    $('#resetEnvConfigBtnId').attr('disabled','disabled');
    if ($("#enableSpot").is(":checked")) {
        $("#spotInstanceConfigDiv").removeClass("hidden");
    } else {
        $("#spotInstanceConfigDiv").addClass("hidden");
    }

    $('#autoscalingGroupConfigFormId input').keyup(function() {
        $('#saveEnvConfigBtnId').removeAttr('disabled');
        $('#resetEnvConfigBtnId').removeAttr('disabled');
    });

    $('#autoscalingGroupConfigFormId select').change(function() {
        $('#saveEnvConfigBtnId').removeAttr('disabled');
        $('#resetEnvConfigBtnId').removeAttr('disabled');
    });

    $('#autoscalingGroupConfigFormId input').change(function() {
        $('#saveEnvConfigBtnId').removeAttr('disabled');
        $('#resetEnvConfigBtnId').removeAttr('disabled');
    });

    $("#enableSpot").click(function() {
       if ($("#enableSpot").is(":checked")) {
        $("#spotInstanceConfigDiv").removeClass("hidden");
       } else {
        $("#spotInstanceConfigDiv").addClass("hidden");
       }
    });

    $('#saveEnvConfigBtnId').click(function () {
        var btn = $(this);
        $.ajax({
            type: 'POST',
            url: '/groups/{{ group_name }}/autoscaling/update_config/',
            data: $("#autoscalingGroupConfigFormId").serialize(),
            dataType: 'json',
            beforeSend: function () {
                btn.button('loading');
            },
            success: function (data) {
                if(data != null && data.success == false) {
                    $('#errorBannerId').append(data.error);
                    $('#errorBannerId').show();
                } else {
                    $("#asgConfigPid").html(data);
                    $('#errorBannerId').empty().hide();
                }
                btn.button('reset');
            },
            error: function (data) {
                $('#errorBannerId').append(data.responseText);
                $('#errorBannerId').show();
            }
        });
    });

    $('#resetEnvConfigBtnId').click(function () {
        var btn = $(this);
        $.ajax({
            type: 'GET',
            url: '/groups/{{ group_name }}/autoscaling/get_asg_config/',
            beforeSend: function () {
                btn.button('loading');
            },
            success: function (data) {
                btn.button('reset');
                $("#asgConfigPid").html(data);
            }
        });
    });
});
</script>
